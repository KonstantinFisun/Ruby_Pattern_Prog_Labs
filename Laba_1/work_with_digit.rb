def main
  number = ARGV.first # Считываем число, поступившее программе
  # puts("Сумма цифр в числе '#{number}' - #{sum_digits_number(number)}") # вызов функции суммы цифр в числе
  # puts("Произведение цифр в числе '#{number}' - #{mul_digits_number(number)}") # вызов функции суммы цифр в числе
  # puts("Минимальная цифра в числе '#{number}' - #{min_digit_number(number)}") # вызов функции минимальной цифры в числе
  # puts("Максимальная цифра в числе '#{number}' - #{max_digit_number(number)}") # вызов функции максимальной цифры в числе
  # puts("Количество четных чисел, не взаимно простых с '#{number}'" +
  #      " - #{count_even_number_not_mut_sim(number)}") # вызов метода: количество четных чисел, не взаимно простых с данным
  # puts("Максимальная цифра числа '#{number}', не делящиеся на 3" +
  #      " - #{max_digit_not_div_3_number(number)}") # вызов метода: максимальная цифра числа, не делящиеся на 3
  puts("Результат 3 метода - #{mul_max(number)}") # Метод 3
end

# Функция суммы цифр в числе
def sum_digits_number(number)
  number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      inject{|a,b| a + b} #  суммируем
end

# Функция произведения цифр в числе
def mul_digits_number(number)
  number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      inject{|a,b| a * b} #  умножаем
end

# Функция минимальной цифры в числе
def min_digit_number(number)
  number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      min # находим минимальное в массиве
end

# Функция максимальной цифры в числе
def max_digit_number(number)
  number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      max # находим максимальное в массиве
end

# Метод 1: количество четных чисел, не взаимно простых с данным
def count_even_number_not_mut_sim(number)
  number = number.to_i
  k = 0 # Счетчик четных чисел, не взаимно простых с данным
  i = 2 # Начало прохода
  while(i < number)
    if(gcd(number, i) != 1)
      k = k + 1
    end
    i = i + 2
  end
  k
end

# Наибольший общий делитель(НОД)
def gcd(a, b)
  if a % b == 0
    b
  else
    gcd(b, a % b)
  end
end

# Метод 2: найти максимальную цифру числа, не делящуюся на 3
def max_digit_not_div_3_number(number)
  number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      find_all{|d| d % 3 != 0}. # находим элементы не делящиеся на 3 в массиве
      max # находим среди них максимальный
end

=begin
Метод 3: Найти произведение максимального числа, не взаимно простого
с данным, не делящегося на наименьший делитель исходного числа, и
суммы цифр числа, меньших 5.
1. Находим наименьший делитель данного числа;
2. Идем по не взаимно простым с данным, не делящийся на наименьший делитель исходного;
3. Находим сумму цифр меньших 5;
4. Умножаем.
=end
def mul_max(number)
  number_int = number.to_i # Приводим к int
  min_div = min_divider(number_int) # Наименьший делитель исходного

  i = number_int-1 # Начало прохода
  while(i > 1)
    if((gcd(number_int, i) != 1) & (i % min_div != 0))
      max_digit = i
      puts("Максмальное число - #{max_digit}")
      break
    end
    i = i - 1
  end

  if(i == 1)
    puts("Такого числа не нашлось(") #Если не нашли такое число
    return
  end

  sum_digit_less_5 = number.split('').  # разбить на отдельные буквы (получим массив однобуквенных строк)
      map {|d| d.to_i }. # буквы (цифры) преобразуем в числа (получим массив чисел)
      find_all{|d| d < 5}. # Отбираем цифры меньше 5
      inject{|a,b| a + b} #  суммируем

  puts("Сумма цифр меньше 5 - #{sum_digit_less_5}")
  sum_digit_less_5 * max_digit
end

# Функция нахождения наименьшего делителя
def min_divider(number)
  k = 2
  while(k)
    if(number % k == 0)
      return k
    end
    k = k + 1
  end
end


if __FILE__ == $0
    main
end
